secrets:
  ca.crt:
    file: ./dev/secrets/certificate_authority/ca/ca.crt
  elasticsearch.keystore:
    file: ./dev/secrets/elasticsearch.keystore
  elastic-stack-ca.p12:
    file: ./dev/secrets/certificate_authority/elastic-stack-ca.p12
  elasticsearch.key:
    file: ./dev/secrets/certificates/elasticsearch/elasticsearch.key
  elasticsearch.cert:
    file: ./dev/secrets/certificates/elasticsearch/elasticsearch.crt
  kibana.key:
    file: ./dev/secrets/certificates/kibana/kibana.key
  kibana.cert:
    file: ./dev/secrets/certificates/kibana/kibana.crt
  logstash.pkcs8.key:
    file: ./dev/secrets/certificates/logstash/logstash.pkcs8.key
  logstash.key:
    file: ./dev/secrets/certificates/logstash/logstash.key
  logstash.p12:
    file: ./dev/secrets/keystores/logstash/logstash.p12
  logstash.cert:
    file: ./dev/secrets/certificates/logstash/logstash.crt
  filebeat.key:
    file: ./dev/secrets/certificates/filebeat/filebeat.key
  filebeat.cert:
    file: ./dev/secrets/certificates/filebeat/filebeat.crt
  metricbeat.key:
    file: ./dev/secrets/certificates/metricbeat/metricbeat.key
  metricbeat.cert:
    file: ./dev/secrets/certificates/metricbeat/metricbeat.crt
  packetbeat.key:
    file: ./dev/secrets/certificates/packetbeat/packetbeat.key
  packetbeat.cert:
    file: ./dev/secrets/certificates/packetbeat/packetbeat.crt

services:
  app:
    build:
      context: .
      dockerfile: ./dev/docker/local.Dockerfile
    ports:
      - 8080:8080
    environment:
      CONN_STRING: host=host.docker.internal user=pguser password=pguser dbname=todo port=5432 sslmode=disable
      AUDITLOG_S3_BUCKET: "audit-local"
      AUDITLOG_S3_DIRECTORY: "todo-api/"
      AUDITLOG_S3_ENDPOINT: "http://localstack:4566"
      AUDITLOG_S3_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: "test"
      AWS_SECRET_ACCESS_KEY: "test"
      AWS_SESSION_TOKEN: "test"
      JWT_SECRET_KEY: g2ZWQUjt6csyUTgDmMEZqmG3Dz9gWENFX@AuLwVppKgW@@6jtQ7@FJGbuL!R9xxfQkj8Y@8tj!eq2@u*nxgVC*62sC!sWT3BwjZT
    labels:
        co.elastic.logs/enabled: true
        co.elastic.logs/json.keys_under_root: true
        co.elastic.logs/json.ignore_decoding_error: true
        co.elastic.logs/json.overwrite_keys: true
        co.elastic.logs/json.add_error_key: true
        co.elastic.logs/json.expand_keys: true
    volumes:
      - .:/build/
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
      localstack:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      grafana:
        condition: service_healthy
  db:
    image: postgres:13-alpine3.18
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pguser
      POSTGRES_DB: todo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
    volumes:
      - ./dev/db/initial.sql:/docker-entrypoint-initdb.d/initial.sql
  filebeat:
    user: root
    image: docker.elastic.co/beats/filebeat:7.14.0
    command: filebeat -e -strict.perms=false
    volumes:
      - ./dev/filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    secrets:
      - source: ca.crt
        target: /usr/share/filebeat/config/ca.crt
      - source: filebeat.cert
        target: /usr/share/filebeat/config/filebeat.crt
      - source: filebeat.key
        target: /usr/share/filebeat/config/filebeat.key
  elasticsearch:
    labels:
      co.elastic.logs/enabled: false
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    volumes:
      - ./dev/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    secrets:
      - source: elasticsearch.keystore
        target: /usr/share/elasticsearch/config/elasticsearch.keystore
      - source: ca.crt
        target: /usr/share/elasticsearch/config/ca.crt
      - source: elasticsearch.cert
        target: /usr/share/elasticsearch/config/elasticsearch.crt
      - source: elasticsearch.key
        target: /usr/share/elasticsearch/config/elasticsearch.key
    healthcheck:
      test: curl -s https://elasticsearch:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - 9200:9200
  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    environment:
      ENCRYPTION_KEY: g2ZWQUjt6csyUTgDmMEZqmG3Dz9gWENFX@AuLwVppKgW@@6jtQ7@FJGbuL!R9xxfQkj8Y@8tj!eq2@u*nxgVC*62sC!sWT3BwjZT
    volumes:
      - ./dev/kibana/kibana.docker.yml:/usr/share/kibana/config/kibana.yml
    secrets:
      - source: ca.crt
        target: /usr/share/kibana/config/ca.crt
      - source: kibana.cert
        target: /usr/share/kibana/config/kibana.crt
      - source: kibana.key
        target: /usr/share/kibana/config/kibana.key
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: curl -s https://kibana:5601 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - 5601:5601
  localstack:
    image: localstack/localstack:1.4.0
    environment:
      SERVICES: s3
    ports:
      - "4566:4566"
    volumes:
      - ./dev/localstack:/docker-entrypoint-initaws.d
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./dev/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://prometheus:9090/-/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./dev/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://grafana:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      prometheus:
        condition: service_healthy

# TODO check https://github.com/swimlane/elk-tls-docker